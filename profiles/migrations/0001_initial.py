# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2017-11-24 10:12
from __future__ import unicode_literals

from django.db import migrations, models
import django.utils.timezone
import django_measurement.models
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('gender', models.IntegerField(choices=[(1, 'Female'), (0, 'Male'), (2, 'Other')], default=0, null=True)),
                ('age', models.PositiveIntegerField()),
                ('serving', models.BooleanField(choices=[(1, 'Non Serving'), (0, 'Serving')], default=0)),
                ('approved_on', models.DateTimeField()),
                ('birth_date_time', models.DateTimeField()),
                ('place_of_birth', models.CharField(max_length=30)),
                ('body_type', models.IntegerField(choices=[(1, 'Average'), (2, 'Overweight'), (0, 'Slim')], default=0, null=True)),
                ('height', django_measurement.models.MeasurementField(measurement_class='Distance')),
                ('weight', django_measurement.models.MeasurementField(measurement_class='Mass')),
                ('mother_tongue', models.CharField(max_length=30)),
                ('religion', models.CharField(max_length=30)),
                ('physical_status', models.IntegerField(choices=[(5, 'Critical'), (6, 'Maximal'), (1, 'Minor'), (2, 'Moderate'), (3, 'Serious'), (4, 'Severe')], default=0, null=True)),
                ('caste', models.CharField(max_length=30)),
                ('gothram', models.CharField(max_length=30)),
                ('zodiac', models.CharField(max_length=30)),
                ('star', models.CharField(max_length=30)),
                ('eating_habit', models.IntegerField(choices=[(2, 'Non Vegetarian'), (1, 'Vegetarian')], default=0, null=True)),
                ('drinking_habit', models.IntegerField(choices=[(0, 'Non Drinker'), (2, 'Occasional'), (1, 'Regular')], default=0, null=True)),
                ('smoking_habit', models.IntegerField(choices=[(0, 'Non Smoker'), (2, 'Occasional'), (1, 'Regular')], default=0, null=True)),
                ('country', models.CharField(max_length=30)),
                ('city', models.CharField(max_length=30)),
                ('state', models.CharField(max_length=30)),
                ('pincode', models.CharField(max_length=30)),
                ('education', models.CharField(max_length=30)),
                ('contact_no', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128)),
                ('images', models.ImageField(upload_to='')),
                ('about_me', models.CharField(max_length=500)),
                ('require_details', models.CharField(max_length=30)),
                ('marital_status', models.IntegerField(choices=[(1, 'Divorced'), (3, 'Married'), (0, 'Unmarried'), (2, 'Widowed')], default=0, null=True)),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=30)),
                ('last_name', models.CharField(blank=True, max_length=30)),
                ('email', models.EmailField(blank=True, max_length=254, unique=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
